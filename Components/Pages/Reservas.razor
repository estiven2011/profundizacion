@page "/reservas"
@using gestionReservas.Models
@inject gestionReservas.Services.AuthService AuthService
@inject gestionReservas.Services.ReservaService ReservaService
@inject gestionReservas.Services.UserService UserService
@inject NavigationManager Navigation

<NavMenu />

@if (!AuthService.EstaAutenticado)
{
    <div class="text-center mt-5">
        <h2 class="text-danger">No tienes acceso a esta vista</h2>
        <p class="mb-3">Debes iniciar sesión para poder reservar una cancha.</p>
        <img src="img/acceso-denegado.png" alt="Acceso denegado" class="img-fluid" style="max-width: 300px;" />
        <div class="mt-4">
            <a href="/login" class="btn btn-outline-primary">Iniciar Sesión</a>
        </div>
    </div>
}
else
{
    <header class="reservas-header">
        <div class="container text-center">
            <h1 class="display-4 fw-bold">Reservas de Canchas</h1>
            <p class="lead">Consulta disponibilidad y reserva tu cancha.</p>
        </div>
    </header>

    <main class="container mt-4 mb-4">
        <section class="reservation-form-section">
            <h2 class="fw-bold text-center">Agregar Nueva Reserva</h2>
            <EditForm Model="nuevaReserva" OnValidSubmit="GuardarReserva">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <label class="form-label">Fecha</label>
                    <InputDate class="form-control"
                               @bind-Value="nuevaReserva.Fecha"
                               min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Cancha</label>
                    <InputSelect class="form-control" @bind-Value="nuevaReserva.CanchaId">
                        <option disabled value="0">-- Selecciona una cancha --</option>
                        @foreach (var cancha in canchas)
                        {
                            <option value="@cancha.Id">@cancha.Nombre (@cancha.Ubicacion)</option>
                        }
                    </InputSelect>
                </div>

                <div class="mb-3">
                    <label class="form-label">Hora Inicio</label>
                    <InputSelect class="form-control" @bind-Value="horaInicio">
                        @foreach (var h in horasDisponibles)
                        {
                            <option value="@h">@h</option>
                        }
                    </InputSelect>
                </div>

                <div class="mb-3">
                    <label class="form-label">Hora Fin</label>
                    <InputSelect class="form-control" @bind-Value="horaFin">
                        @foreach (var h in horasFinDisponibles)
                        {
                            <option value="@h">@h</option>
                        }
                    </InputSelect>
                </div>

                <button type="submit" class="btn btn-primary w-100">
                    @(nuevaReserva.Id == 0 ? "Crear Reserva" : "Actualizar Reserva")
                </button>

                @if (mostrarAlerta)
                {
                    <div class="alert alert-@alertaTipo alert-dismissible fade show mt-3" role="alert">
                        @alertaMensaje
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Cerrar"></button>
                    </div>
                }
            </EditForm>
        </section>

        <section class="reservation-list-section mt-5">
            <h2 class="fw-bold text-center">Reservas Existentes</h2>
            <ul class="list-group mt-3">
                @foreach (var reserva in reservas)
                {
                    <li class="list-group-item">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <strong>@reserva.Usuario.Nombre</strong> - @reserva.Cancha.Nombre<br />
                                @reserva.Fecha.ToShortDateString() | @reserva.HoraInicio - @reserva.HoraFin
                            </div>
                            <div>
                                <button class="btn btn-warning btn-sm me-2" @onclick="() => EditarReserva(reserva)">Editar</button>
                                <button class="btn btn-danger btn-sm" @onclick="() => EliminarReserva(reserva)">Eliminar</button>
                            </div>
                        </div>
                    </li>
                }
            </ul>
        </section>
    </main>
}

@code {
    private List<Reserva> reservas = new();
    private List<Cancha> canchas = new();
    private Reserva nuevaReserva = new() { Fecha = DateTime.Today };

    private string _horaInicio;
    private string horaInicio
    {
        get => _horaInicio;
        set
        {
            _horaInicio = value;
            GenerarHorasFin();
        }
    }

    private string horaFin;
    private List<string> horasDisponibles = new();
    private List<string> horasFinDisponibles = new();

    private string alertaMensaje;
    private string alertaTipo;
    private bool mostrarAlerta;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        canchas = await ReservaService.ObtenerCanchasAsync();
        var todas = await ReservaService.ObtenerReservasAsync();

        reservas = todas
            .Where(r => r.Usuario.Documento == AuthService.Documento)
            .ToList();

        GenerarHoras();
    }


    private void GenerarHoras()
    {
        horasDisponibles.Clear();
        var desde = new TimeSpan(10, 0, 0);
        var hasta = new TimeSpan(23, 0, 0);
        for (var h = desde; h <= hasta; h += TimeSpan.FromHours(1))
        {
            horasDisponibles.Add(h.ToString(@"hh\:mm"));
        }
    }

    private void GenerarHorasFin()
    {
        horasFinDisponibles.Clear();
        if (TimeSpan.TryParse(horaInicio, out var inicio))
        {
            foreach (var hora in horasDisponibles)
            {
                var ts = TimeSpan.Parse(hora);
                if (ts > inicio && ts <= inicio.Add(TimeSpan.FromHours(2)))
                {
                    horasFinDisponibles.Add(hora);
                }
            }
        }
    }

    private async Task GuardarReserva()
    {
        if (TimeSpan.Parse(horaInicio) >= TimeSpan.Parse(horaFin)) return;

        var usuario = await UserService.ObtenerIdPorDocumentoAsync(AuthService.Documento);
        if (usuario is null) return;

        nuevaReserva.UsuarioId = usuario.Value;
        nuevaReserva.HoraInicio = TimeSpan.Parse(horaInicio);
        nuevaReserva.HoraFin = TimeSpan.Parse(horaFin);

        if (nuevaReserva.Id == 0)
        {
            await ReservaService.CrearReservaAsync(nuevaReserva);
            await MostrarAlerta("Reserva creada exitosamente", "success");
        }
        else
        {
            await ReservaService.EditarReservaAsync(nuevaReserva);
            await MostrarAlerta("Reserva actualizada correctamente", "info");
        }

        nuevaReserva = new() { Fecha = DateTime.Today };
        horaInicio = null;
        horaFin = null;

        await CargarDatos();
    }

    private void EditarReserva(Reserva reserva)
    {
        nuevaReserva = new Reserva
        {
            Id = reserva.Id,
            Fecha = reserva.Fecha,
            CanchaId = reserva.CanchaId,
            UsuarioId = reserva.UsuarioId
        };
        horaInicio = reserva.HoraInicio.ToString(@"hh\:mm");
        horaFin = reserva.HoraFin.ToString(@"hh\:mm");
    }

    private async Task EliminarReserva(Reserva reserva)
    {
        await ReservaService.EliminarReservaAsync(reserva);
        await MostrarAlerta("Reserva eliminada correctamente", "danger");
        await CargarDatos();
    }

    private async Task MostrarAlerta(string mensaje, string tipo = "success", int duracion = 3000)
    {
        alertaMensaje = mensaje;
        alertaTipo = tipo;
        mostrarAlerta = true;

        StateHasChanged();
        await Task.Delay(duracion);
        mostrarAlerta = false;
        StateHasChanged();
    }
}
