@page "/admin"
@inject gestionReservas.Services.AuthService Auth
@inject gestionReservas.Services.UserService UserService
@inject gestionReservas.Services.ReservaService ReservaService
@inject IJSRuntime JS
@using gestionReservas.Models

<div class="container mt-5">
    @if (Auth.EstaAutenticado && Auth.Rol == "Admin")
    {
        <div class="text-center mb-4">
            <h1 class="text-primary">Panel de Administrador</h1>
            <p class="lead">Bienvenido, @Auth.NombreUsuario</p>
        </div>

        <div class="mb-3 d-flex justify-content-between align-items-center">
            <h4 class="mb-0">Reservas registradas</h4>
            <input type="text"
                   class="form-control w-50"
                   placeholder="Buscar por nombre o documento"
                   @oninput="FiltrarDinamico" />
        </div>

        @if (reservasFiltradas is null || reservasFiltradas.Count == 0)
        {
            <p>No hay reservas que coincidan con la búsqueda.</p>
        }
        else
        {
            <table class="table table-striped table-bordered shadow-sm">
                <thead class="table-light">
                    <tr>
                        <th>Usuario</th>
                        <th>Documento</th>
                        <th>Cancha</th>
                        <th>Fecha</th>
                        <th>Horario</th>
                        <th style="min-width: 180px;">Estado</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var r in reservasFiltradas
                   .OrderBy(r => r.Fecha >= DateTime.Today ? 0 : 1)
                   .ThenBy(r => r.Fecha))
                    {
                        var esPasada = r.Fecha < DateTime.Today;
                        var estaActivaYExpirada = r.Estado == "Activa" && esPasada;
                        var estaActivaYVigente = r.Estado == "Activa" && !esPasada;

                        <tr>
                            <td>@r.Usuario.Nombre</td>
                            <td>@r.Usuario.Documento</td>
                            <td>@r.Cancha.Nombre</td>
                            <td>@r.Fecha.ToString("yyyy-MM-dd")</td>
                            <td>@r.HoraInicio - @r.HoraFin</td>
                            <td class="d-flex align-items-center gap-2">
                                @if (r.Estado == "Cancelada")
                                {
                                    <span class="badge bg-danger">Cancelada</span>
                                }
                                else if (estaActivaYVigente)
                                {
                                    <span class="badge bg-success">Activa</span>
                                    <button class="btn btn-sm btn-outline-danger"
                                            title="Cancelar esta reserva"
                                            @onclick="() => ConfirmarCancelacion(r.Id)">
                                        Cancelar
                                    </button>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">Ya pasó</span>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    }
    else
    {
        <div class="d-flex flex-column align-items-center justify-content-center" style="min-height: 60vh;">
            <img src="https://cdn-icons-png.flaticon.com/512/6197/6197190.png"
                 alt="Acceso denegado"
                 width="150"
                 class="mb-4" />

            <h3 class="text-danger text-center">No tienes permiso para acceder a esta vista.</h3>
            <p class="text-muted text-center mb-3">Debes iniciar sesión como <strong>Administrador</strong> para ver esta sección.</p>

            <a class="btn btn-outline-primary" href="/login">Iniciar sesión</a>
        </div>
    }
</div>

@code {
    private List<Reserva> reservas = new();
    private List<Reserva> reservasFiltradas = new();
    private string filtroBusqueda = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (Auth.EstaAutenticado && Auth.Rol == "Admin")
        {
            reservas = await ReservaService.ObtenerReservasAsync();
            AplicarFiltro();
        }
    }

    private void FiltrarDinamico(ChangeEventArgs e)
    {
        filtroBusqueda = e.Value?.ToString()?.ToLower() ?? "";
        AplicarFiltro();
    }

    private void AplicarFiltro()
    {
        if (string.IsNullOrWhiteSpace(filtroBusqueda))
        {
            reservasFiltradas = reservas;
        }
        else
        {
            reservasFiltradas = reservas
                .Where(r =>
                    r.Usuario.Nombre.ToLower().Contains(filtroBusqueda) ||
                    r.Usuario.Documento.ToLower().Contains(filtroBusqueda))
                .ToList();
        }

        StateHasChanged();
    }

    private async Task ConfirmarCancelacion(int reservaId)
    {
        bool confirmar = await JS.InvokeAsync<bool>("confirm", "¿Estás seguro de que deseas cancelar esta reserva?");
        if (confirmar)
        {
            await CancelarReserva(reservaId);
        }
    }

    private async Task CancelarReserva(int reservaId)
    {
        await ReservaService.CancelarReservaAsync(reservaId);
        reservas = await ReservaService.ObtenerReservasAsync();
        AplicarFiltro();
    }
}
