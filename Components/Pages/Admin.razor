@page "/admin"
@inject gestionReservas.Services.AuthService Auth
@inject gestionReservas.Services.UserService UserService
@inject gestionReservas.Services.ReservaService ReservaService
@inject IJSRuntime JS
@using gestionReservas.Models

<div class="container mt-5">
    @if (Auth.EstaAutenticado && Auth.Rol == "Admin")
    {
        <div class="text-center mb-4">
            <h1 class="text-primary">Panel de Administrador</h1>
            <p class="lead">Bienvenido, @Auth.NombreUsuario</p>
        </div>

        <!-- PANEL DE RESUMEN -->
        <div class="row mb-4 text-center">
            <div class="col-md-3 mb-2">
                <div class="card border-success shadow-sm">
                    <div class="card-body">
                        <h6 class="text-success">Activas hoy</h6>
                        <h3>@activasHoy</h3>
                    </div>
                </div>
            </div>
            <div class="col-md-3 mb-2">
                <div class="card border-danger shadow-sm">
                    <div class="card-body">
                        <h6 class="text-danger">Canceladas hoy</h6>
                        <h3>@canceladasHoy</h3>
                    </div>
                </div>
            </div>
            <div class="col-md-3 mb-2">
                <div class="card border-secondary shadow-sm">
                    <div class="card-body">
                        <h6 class="text-secondary">Expiradas hoy</h6>
                        <h3>@expiradasHoy</h3>
                    </div>
                </div>
            </div>
            <div class="col-md-3 mb-2">
                <div class="card border-primary shadow-sm">
                    <div class="card-body">
                        <h6 class="text-primary">Total hoy</h6>
                        <h3>@reservasHoy</h3>
                    </div>
                </div>
            </div>
        </div>

        <div class="mb-3 d-flex justify-content-between align-items-center">
    <h4 class="mb-0">Reservas registradas</h4>

    <div class="d-flex gap-2 w-75">
        <input type="text"
               class="form-control"
               placeholder="Buscar por nombre o documento"
               @oninput="FiltrarDinamico" />

                <select class="form-select" @bind="filtroEstado">

            <option value="">-- Estado --</option>
            <option value="Activa">Activa</option>
            <option value="Cancelada">Cancelada</option>
            <option value="Expirada">Ya expiró</option>
        </select>
    </div>
</div>


        @if (reservasFiltradas is null || reservasFiltradas.Count == 0)
        {
            <p>No hay reservas que coincidan con la búsqueda.</p>
        }
        else
        {
            <table class="table table-striped table-bordered shadow-sm">
                <thead class="table-light">
                    <tr>
                        <th>Usuario</th>
                        <th>Documento</th>
                        <th>Cancha</th>
                        <th>Fecha</th>
                        <th>Horario</th>
                        <th>Estado</th>
                        <th>Historial</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var r in reservasFiltradas
                   .OrderBy(r => r.Fecha >= DateTime.Today ? 0 : 1)
                   .ThenBy(r => r.Fecha))
                    {
                        var esActiva = r.Estado?.Trim().ToLower() == "activa";
                        var estaActivaYVigente = esActiva && r.Fecha >= DateTime.Today;
                        var estaActivaYExpirada = esActiva && r.Fecha < DateTime.Today;

                        <tr>
                            <td>@r.Usuario.Nombre</td>
                            <td>@r.Usuario.Documento</td>
                            <td>@r.Cancha.Nombre</td>
                            <td>@r.Fecha:yyyy-MM-dd</td>
                            <td>@r.HoraInicio - @r.HoraFin</td>
                            <td class="d-flex align-items-center gap-2">
                                @if (r.Estado == "Cancelada")
                                {
                                    <span class="badge bg-danger">Cancelada</span>
                                }
                                else if (estaActivaYVigente)
                                {
                                    <span class="badge bg-success">Activa</span>
                                    <button class="btn btn-sm btn-outline-danger"
                                            @onclick="() => ConfirmarCancelacion(r.Id)">
                                        Cancelar
                                    </button>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">Ya expiró</span>
                                }
                            </td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary"
                                        @onclick="() => MostrarHistorial(r.Usuario.Documento, r.Usuario.Nombre)">
                                    Ver historial
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        @if (mostrarHistorial)
        {
            <hr />
            <h5 class="mt-4 text-primary">Historial de reservas de @nombreUsuarioHistorial</h5>

            @if (historialUsuario is null)
            {
                <p>Cargando historial...</p>
            }
            else if (!historialUsuario.Any())
            {
                <p>Este usuario no tiene reservas.</p>
            }
            else
            {
                <table class="table table-sm table-striped table-hover mt-2">
                    <thead>
                        <tr>
                            <th>Cancha</th>
                            <th>Fecha</th>
                            <th>Horario</th>
                            <th>Estado</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var r in historialUsuario.OrderByDescending(r => r.Fecha))
                        {
                            var esActiva = r.Estado?.Trim().ToLower() == "activa";
                            var estaExpirada = esActiva && r.Fecha < DateTime.Today;
                            var estadoFinal = estaExpirada ? "Ya pasó" : r.Estado?.Trim();

                            <tr>
                                <td>@r.Cancha.Nombre</td>
                                <td>@r.Fecha:yyyy-MM-dd</td>
                                <td>@r.HoraInicio - @r.HoraFin</td>
                                <td>
                                    @if (estadoFinal == "Cancelada")
                                    {
                                        <span class="badge bg-danger">Cancelada</span>
                                    }
                                    else if (estadoFinal == "Activa")
                                    {
                                        <span class="badge bg-success">Activa</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">Ya expiró</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <button class="btn btn-sm btn-outline-secondary mt-2 mb-3" @onclick="() => mostrarHistorial = false">
                    Cerrar historial
                </button>
            }
        }
    }
    else
    {

        <div class="container mt-5">
            <div class="row justify-content-center">
                <div class="col-md-8">
                    <div class="card shadow-lg border-0 rounded-3">
                        <div class="card-header bg-primary text-white text-center">
                            <h3 class="mb-0">Reservas</h3>
                        </div>
                        <div class="text-center p-4">
                            <img src="https://cdn-icons-png.flaticon.com/512/5624/5624013.png" alt="Acceso restringido" style="max-width: 150px;" class="mb-3" />

                            <h5 class="text-danger fw-bold">Acceso restringido - No tienes acceso a esta vista</h5>


                            <p class="text-muted">Debes iniciar sesión como <strong>Administrador</strong> para ver esta sección.</p>

                            <a href="/login" class="btn btn-outline-primary px-4 mt-2">
                                Iniciar sesión
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Reserva> reservas = new();
    private List<Reserva> reservasFiltradas = new();
    private List<Reserva> historialUsuario = new();
    private string filtroBusqueda = string.Empty;
    private bool mostrarHistorial = false;
    private string nombreUsuarioHistorial = "";

    // Contadores del dashboard
    private int reservasHoy = 0;
    private int activasHoy = 0;
    private int canceladasHoy = 0;
    private int expiradasHoy = 0;

    private string _filtroEstado = "";
    private string filtroEstado
    {
        get => _filtroEstado;
        set
        {
            _filtroEstado = value;
            AplicarFiltro();
        }
    }



    protected override async Task OnInitializedAsync()
    {
        if (Auth.EstaAutenticado && Auth.Rol == "Admin")
        {
            reservas = await ReservaService.ObtenerReservasAsync();
            AplicarFiltro();

            var hoy = DateTime.Today;
            var reservasDelDia = reservas.Where(r => r.Fecha == hoy).ToList();

            reservasHoy = reservasDelDia.Count;
            activasHoy = reservasDelDia.Count(r => r.Estado?.ToLower() == "activa");
            canceladasHoy = reservasDelDia.Count(r => r.Estado?.ToLower() == "cancelada");
            expiradasHoy = reservasDelDia.Count(r => r.Estado?.ToLower() == "activa" && r.Fecha < hoy);
        }
    }

    private void FiltrarDinamico(ChangeEventArgs e)
    {
        filtroBusqueda = e.Value?.ToString()?.ToLower() ?? "";
        AplicarFiltro();
    }

    private void AplicarFiltro()
    {
        reservasFiltradas = reservas
            .Where(r =>
            {
                var coincideBusqueda = string.IsNullOrWhiteSpace(filtroBusqueda) ||
                    r.Usuario.Nombre.ToLower().Contains(filtroBusqueda) ||
                    r.Usuario.Documento.ToLower().Contains(filtroBusqueda);

                // Detectar si es una reserva expirada
                var esActiva = r.Estado?.Trim().ToLower() == "activa";
                var estadoFinal = r.Estado;

                if (esActiva && r.Fecha < DateTime.Today)
                    estadoFinal = "Expirada";

                var coincideEstado = string.IsNullOrWhiteSpace(filtroEstado) || estadoFinal == filtroEstado;

                return coincideBusqueda && coincideEstado;
            })
            .ToList();
    }


    private async Task ConfirmarCancelacion(int reservaId)
    {
        bool confirmar = await JS.InvokeAsync<bool>("confirm", "¿Estás seguro de que deseas cancelar esta reserva?");
        if (confirmar)
        {
            await CancelarReserva(reservaId);
        }
    }

    private async Task CancelarReserva(int reservaId)
    {
        await ReservaService.CancelarReservaAsync(reservaId);
        reservas = await ReservaService.ObtenerReservasAsync();
        AplicarFiltro();
    }

    private async Task MostrarHistorial(string documento, string nombre)
    {
        historialUsuario = await ReservaService.ObtenerReservasPorDocumentoAsync(documento);
        nombreUsuarioHistorial = nombre;
        mostrarHistorial = true;
    }
}
